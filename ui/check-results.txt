
> customer-ui@0.11.0 check
> svelte-check --tsconfig ./tsconfig.json


====================================
Loading svelte-check in workspace: /home/bur1/Holochain/summon/ui
Getting Svelte diagnostics...

/home/bur1/Holochain/summon/ui/src/AllProductsGrid.svelte:20:16
Warn: Component has unused export property 'allProductsTotal'. If it is for external reference only, please consider using `export const allProductsTotal` (svelte)
    export let products: any[] = [];
    export let allProductsTotal: number = 0;



/home/bur1/Holochain/summon/ui/src/NavigationArrows.svelte:11:16
Warn: Component has unused export property 'store'. If it is for external reference only, please consider using `export const store` (svelte)
    export let identifier: string;
    export let store: any;
    export let selectedCategory: string;


/home/bur1/Holochain/summon/ui/src/ProductRow.svelte:37:9
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
        </div>
        <span
            class="view-all-link btn btn-text"
            on:click|stopPropagation={onViewMore}
        >
            View More
            <ChevronRight size={20} class="chevron-icon" />
        </span>
    </div>


/home/bur1/Holochain/summon/ui/src/ProductRow.svelte:37:9
Warn: A11y: <span> with click handler must have an ARIA role (svelte)
        </div>
        <span
            class="view-all-link btn btn-text"
            on:click|stopPropagation={onViewMore}
        >
            View More
            <ChevronRight size={20} class="chevron-icon" />
        </span>
    </div>


/home/bur1/Holochain/summon/ui/src/ShopView.svelte:212:11
Warn: Empty block (svelte)

          {#if $isHomeViewStore}{/if}
        {/if}


/home/bur1/Holochain/summon/ui/src/ShopView.svelte:54:14
Warn: Component has unused export property 'standAlone'. If it is for external reference only, please consider using `export const standAlone` (svelte)

  export let standAlone = false;



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:837:9
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
    {#if showDropdown}
        <div
            class="search-overlay"
            on:click={() => (showDropdown = false)}
            use:portal
        ></div>



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:837:9
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
    {#if showDropdown}
        <div
            class="search-overlay"
            on:click={() => (showDropdown = false)}
            use:portal
        ></div>



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:863:29
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
                        {#if result.isType && "type" in result && "sample" in result}
                            <div
                                class="dropdown-item type-item"
                                on:click={() => handleClickType(result)}
                            >
                                <div class="product-image">
                                    {#if result.sample && "image_url" in result.sample && result.sample.image_url}
                                        <img
                                            src={result.sample.image_url}
                                            alt={result.type}
                                        />
                                    {/if}
                                </div>
                                <div class="product-name">
                                    <span class="product-type"
                                        >{result.type}</span
                                    >
                                    {searchQuery}
                                </div>
                            </div>
                        {:else if !result.isType && "name" in result && "price" in result}


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:863:29
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
                        {#if result.isType && "type" in result && "sample" in result}
                            <div
                                class="dropdown-item type-item"
                                on:click={() => handleClickType(result)}
                            >
                                <div class="product-image">
                                    {#if result.sample && "image_url" in result.sample && result.sample.image_url}
                                        <img
                                            src={result.sample.image_url}
                                            alt={result.type}
                                        />
                                    {/if}
                                </div>
                                <div class="product-name">
                                    <span class="product-type"
                                        >{result.type}</span
                                    >
                                    {searchQuery}
                                </div>
                            </div>
                        {:else if !result.isType && "name" in result && "price" in result}


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:883:29
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
                        {:else if !result.isType && "name" in result && "price" in result}
                            <div
                                class="dropdown-item"
                                on:click={() => handleClickProduct(result)}
                            >
                                <div class="product-image">
                                    {#if "image_url" in result && result.image_url}
                                        <img
                                            src={result.image_url}
                                            alt={result.name}
                                        />
                                    {/if}
                                </div>
                                <div class="product-name">{result.name}</div>
                                <div class="product-price">
                                    ${typeof result.price === "number"
                                        ? result.price.toFixed(2)
                                        : "0.00"}
                                </div>
                            </div>
                        {/if}


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:883:29
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
                        {:else if !result.isType && "name" in result && "price" in result}
                            <div
                                class="dropdown-item"
                                on:click={() => handleClickProduct(result)}
                            >
                                <div class="product-image">
                                    {#if "image_url" in result && result.image_url}
                                        <img
                                            src={result.image_url}
                                            alt={result.name}
                                        />
                                    {/if}
                                </div>
                                <div class="product-name">{result.name}</div>
                                <div class="product-price">
                                    ${typeof result.price === "number"
                                        ? result.price.toFixed(2)
                                        : "0.00"}
                                </div>
                            </div>
                        {/if}


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:906:13
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
            </div>
            <div class="view-all" on:click={handleViewAllResults}>
                View all results
            </div>
        </div>


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:906:13
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
            </div>
            <div class="view-all" on:click={handleViewAllResults}>
                View all results
            </div>
        </div>


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:28:16
Warn: Component has unused export property 'productCache'. If it is for external reference only, please consider using `export const productCache` (svelte)
    export let store;
    export let productCache;



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:60:21
Error: Parameter 'node' implicitly has an 'any' type. (ts)

    function portal(node) {
        let target = document.body;


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:92:13
Error: Argument of type '() => Promise<() => void>' is not assignable to parameter of type '() => Promise<never> | (() => any)'.
  Type 'Promise<() => void>' is not assignable to type 'Promise<never> | (() => any)'.
    Type 'Promise<() => void>' is not assignable to type 'Promise<never>'.
      Type '() => void' is not assignable to type 'never'. (ts)

    onMount(async () => {
        try {


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:113:36
Error: Argument of type 'ProcessedProduct[]' is not assignable to parameter of type 'Product[]'.
  Type 'ProcessedProduct' is not assignable to type 'Product'.
    Types of property 'category' are incompatible.
      Type 'string | null' is not assignable to type 'string | undefined'.
        Type 'null' is not assignable to type 'string | undefined'. (ts)
            );
            initializeProductIndex(productsFromCache); // This sets `productIndex` globally in the script



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:178:72
Error: 'error' is of type 'unknown'. (ts)
            );
            embeddingStatus = `Error initializing embedding service: ${error.message}`;
        }


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:562:13
Error: Variable 'currentResults' implicitly has type 'any[]' in some locations where its type cannot be determined. (ts)
        // Ensure we have valid searchResults
        let currentResults = [];



/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:571:14
Error: Variable 'currentResults' implicitly has an 'any[]' type. (ts)
        if (
            !currentResults.some(
                (p) => p.hash.toString() === product.hash.toString(),


/home/bur1/Holochain/summon/ui/src/search/SearchBar.svelte:589:26
Error: Variable 'currentResults' implicitly has an 'any[]' type. (ts)
            product_type: product.product_type,
            fuseResults: currentResults,
            searchMethod: "product_selection",


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:910:5
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
{#if showApproveDialog && selectedReport}
    <div
        class="overlay"
        style="background-color: rgba(0,0,0,0.7); z-index: 9999;"
        on:click|self={() => {
            showApproveDialog = false;
            selectedReport = null;
        }}
        use:portal
    >
        <div class="dialog">
            <h2>Review Category Report ({selectedReport.id})</h2>

            <div class="report-details">
                <div class="report-section">
                    <h3>Product</h3>
                    <p><strong>Name:</strong> {selectedReport.product.name}</p>
                    <p>
                        <strong>Size:</strong>
                        {selectedReport.product.size || "Not specified"}
                    </p>
                    {#if selectedReport.product.image_url}
                        <img
                            src={selectedReport.product.image_url}
                            alt={selectedReport.product.name}
                            class="product-img"
                        />
                    {:else}
                        <div class="no-image">
                            <p>No image available for this product</p>
                            <p class="product-name">
                                {selectedReport.product.name}
                            </p>
                        </div>
                    {/if}
                </div>

                <div class="report-section">
                    <h3>Current Categorization</h3>
                    <ul>
                        <li>
                            <strong>Category:</strong>
                            {selectedReport.currentCategory.category || "N/A"}
                        </li>
                        <li>
                            <strong>Subcategory:</strong>
                            {selectedReport.currentCategory.subcategory ||
                                "N/A"}
                        </li>
                        <li>
                            <strong>Product Type:</strong>
                            {selectedReport.currentCategory.product_type ||
                                "N/A"}
                        </li>
                    </ul>
                </div>

                {#if selectedReport.source === "system" || !selectedReport.suggestedCategory?.category || selectedReport.type === "negative_example"}
                    <div class="report-section system-section">
                        <h3>
                            {#if selectedReport.type === "negative_example"}
                                Flagged as Incorrect
                            {:else}
                                Select Correct Category
                            {/if}
                        </h3>
                        {#if selectedReport.type !== "negative_example"}
                            <p class="system-note">
                                This report requires you to select the correct
                                category.
                            </p>
                        {/if}

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select
                                id="category"
                                bind:value={selectedCategory}
                                class="form-select"
                                disabled={selectedReport.type ===
                                    "negative_example"}
                            >
                                <option value={null}>Select Category</option>
                                {#each mainCategories as category}
                                    <option value={category.name}
                                        >{category.name}</option
                                    >
                                {/each}
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="subcategory">Subcategory:</label>
                            <select
                                id="subcategory"
                                bind:value={selectedSubcategory}
                                disabled={!selectedCategory ||
                                    selectedReport.type === "negative_example"}
                                class="form-select"
                            >
                                <option value={null}>Select Subcategory</option>
                                {#each subcategories as subcategory}
                                    <option value={subcategory.name}
                                        >{subcategory.name}</option
                                    >
                                {/each}
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="productType">Product Type:</label>
                            <select
                                id="productType"
                                bind:value={selectedProductType}
                                disabled={!selectedSubcategory ||
                                    subcategories.find(
                                        (s) => s.name === selectedSubcategory,
                                    )?.gridOnly ||
                                    selectedReport.type === "negative_example"}
                                class="form-select"
                            >
                                {#if subcategories.find((s) => s.name === selectedSubcategory)?.gridOnly}
                                    <option value={selectedSubcategory}
                                        >{selectedSubcategory}</option
                                    >
                                {:else if productTypes && productTypes.length > 0}
                                    <option value={null}
                                        >Select Product Type</option
                                    >
                                    {#each productTypes as type}
                                        <option value={type}>{type}</option>
                                    {/each}
                                {:else if selectedSubcategory}
                                    <option value={null}
                                        >No product types defined</option
                                    >
                                {/if}
                            </select>
                        </div>
                    </div>
                {:else}
                    <!-- User-suggested category, already reviewed by user -->
                    <div class="report-section">
                        <h3>Suggested Categorization (by User)</h3>
                        <ul>
                            <li>
                                <strong>Category:</strong>
                                {selectedReport.suggestedCategory.category}
                            </li>
                            <li>
                                <strong>Subcategory:</strong>
                                {selectedReport.suggestedCategory.subcategory ||
                                    "N/A"}
                            </li>
                            <li>
                                <strong>Product Type:</strong>
                                {selectedReport.suggestedCategory
                                    .product_type ||
                                    selectedReport.suggestedCategory
                                        .subcategory ||
                                    "N/A"}
                            </li>
                        </ul>
                    </div>
                {/if}

                {#if selectedReport.notes}
                    <div class="report-section">
                        <h3>Notes</h3>
                        <p>{selectedReport.notes}</p>
                    </div>
                {/if}

                <div class="action-buttons">
                    <button class="reject-btn" on:click={() => rejectReport()}>
                        Reject
                    </button>

                    <button
                        class="approve-btn"
                        on:click={() => approveReport()}
                    >
                        {selectedReport.type === "negative_example"
                            ? "Confirm as Incorrect & Re-evaluate"
                            : "Approve Suggestion"}
                    </button>

                    <button
                        class="cancel-btn"
                        on:click={() => {
                            showApproveDialog = false;
                            selectedReport = null;
                        }}
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
{/if}


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:910:5
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
{#if showApproveDialog && selectedReport}
    <div
        class="overlay"
        style="background-color: rgba(0,0,0,0.7); z-index: 9999;"
        on:click|self={() => {
            showApproveDialog = false;
            selectedReport = null;
        }}
        use:portal
    >
        <div class="dialog">
            <h2>Review Category Report ({selectedReport.id})</h2>

            <div class="report-details">
                <div class="report-section">
                    <h3>Product</h3>
                    <p><strong>Name:</strong> {selectedReport.product.name}</p>
                    <p>
                        <strong>Size:</strong>
                        {selectedReport.product.size || "Not specified"}
                    </p>
                    {#if selectedReport.product.image_url}
                        <img
                            src={selectedReport.product.image_url}
                            alt={selectedReport.product.name}
                            class="product-img"
                        />
                    {:else}
                        <div class="no-image">
                            <p>No image available for this product</p>
                            <p class="product-name">
                                {selectedReport.product.name}
                            </p>
                        </div>
                    {/if}
                </div>

                <div class="report-section">
                    <h3>Current Categorization</h3>
                    <ul>
                        <li>
                            <strong>Category:</strong>
                            {selectedReport.currentCategory.category || "N/A"}
                        </li>
                        <li>
                            <strong>Subcategory:</strong>
                            {selectedReport.currentCategory.subcategory ||
                                "N/A"}
                        </li>
                        <li>
                            <strong>Product Type:</strong>
                            {selectedReport.currentCategory.product_type ||
                                "N/A"}
                        </li>
                    </ul>
                </div>

                {#if selectedReport.source === "system" || !selectedReport.suggestedCategory?.category || selectedReport.type === "negative_example"}
                    <div class="report-section system-section">
                        <h3>
                            {#if selectedReport.type === "negative_example"}
                                Flagged as Incorrect
                            {:else}
                                Select Correct Category
                            {/if}
                        </h3>
                        {#if selectedReport.type !== "negative_example"}
                            <p class="system-note">
                                This report requires you to select the correct
                                category.
                            </p>
                        {/if}

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select
                                id="category"
                                bind:value={selectedCategory}
                                class="form-select"
                                disabled={selectedReport.type ===
                                    "negative_example"}
                            >
                                <option value={null}>Select Category</option>
                                {#each mainCategories as category}
                                    <option value={category.name}
                                        >{category.name}</option
                                    >
                                {/each}
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="subcategory">Subcategory:</label>
                            <select
                                id="subcategory"
                                bind:value={selectedSubcategory}
                                disabled={!selectedCategory ||
                                    selectedReport.type === "negative_example"}
                                class="form-select"
                            >
                                <option value={null}>Select Subcategory</option>
                                {#each subcategories as subcategory}
                                    <option value={subcategory.name}
                                        >{subcategory.name}</option
                                    >
                                {/each}
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="productType">Product Type:</label>
                            <select
                                id="productType"
                                bind:value={selectedProductType}
                                disabled={!selectedSubcategory ||
                                    subcategories.find(
                                        (s) => s.name === selectedSubcategory,
                                    )?.gridOnly ||
                                    selectedReport.type === "negative_example"}
                                class="form-select"
                            >
                                {#if subcategories.find((s) => s.name === selectedSubcategory)?.gridOnly}
                                    <option value={selectedSubcategory}
                                        >{selectedSubcategory}</option
                                    >
                                {:else if productTypes && productTypes.length > 0}
                                    <option value={null}
                                        >Select Product Type</option
                                    >
                                    {#each productTypes as type}
                                        <option value={type}>{type}</option>
                                    {/each}
                                {:else if selectedSubcategory}
                                    <option value={null}
                                        >No product types defined</option
                                    >
                                {/if}
                            </select>
                        </div>
                    </div>
                {:else}
                    <!-- User-suggested category, already reviewed by user -->
                    <div class="report-section">
                        <h3>Suggested Categorization (by User)</h3>
                        <ul>
                            <li>
                                <strong>Category:</strong>
                                {selectedReport.suggestedCategory.category}
                            </li>
                            <li>
                                <strong>Subcategory:</strong>
                                {selectedReport.suggestedCategory.subcategory ||
                                    "N/A"}
                            </li>
                            <li>
                                <strong>Product Type:</strong>
                                {selectedReport.suggestedCategory
                                    .product_type ||
                                    selectedReport.suggestedCategory
                                        .subcategory ||
                                    "N/A"}
                            </li>
                        </ul>
                    </div>
                {/if}

                {#if selectedReport.notes}
                    <div class="report-section">
                        <h3>Notes</h3>
                        <p>{selectedReport.notes}</p>
                    </div>
                {/if}

                <div class="action-buttons">
                    <button class="reject-btn" on:click={() => rejectReport()}>
                        Reject
                    </button>

                    <button
                        class="approve-btn"
                        on:click={() => approveReport()}
                    >
                        {selectedReport.type === "negative_example"
                            ? "Confirm as Incorrect & Re-evaluate"
                            : "Approve Suggestion"}
                    </button>

                    <button
                        class="cancel-btn"
                        on:click={() => {
                            showApproveDialog = false;
                            selectedReport = null;
                        }}
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
{/if}


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:1117:9
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
    >
        <div class="sync-modal" on:click|stopPropagation>
            <div class="sync-modal-header">
                <h3>DHT Synchronization Status</h3>
                {#if !syncStatus.inProgress}
                    <button
                        class="close-button"
                        on:click={() => (syncStatusModalOpen = false)}
                    >
                        <X size={20} />
                    </button>
                {/if}
            </div>

            <div class="sync-modal-content">
                {#if syncStatus.inProgress}
                    <div class="sync-status">
                        <div class="sync-spinner"></div>
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>

                    <div class="progress-container">
                        <div
                            class="progress-bar"
                            style="width: {syncStatus.progress}%"
                        ></div>
                    </div>

                    <p class="sync-count">
                        {syncStatus.completedUpdates} / {syncStatus.totalToUpdate}
                        product types processed
                    </p>
                {:else if syncStatus.message.includes("error") || syncStatus.message.includes("Error")}
                    <div class="sync-error">
                        <AlertCircle size={32} color="#ff5555" />
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {:else}
                    <div class="sync-success">
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:1117:9
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
    >
        <div class="sync-modal" on:click|stopPropagation>
            <div class="sync-modal-header">
                <h3>DHT Synchronization Status</h3>
                {#if !syncStatus.inProgress}
                    <button
                        class="close-button"
                        on:click={() => (syncStatusModalOpen = false)}
                    >
                        <X size={20} />
                    </button>
                {/if}
            </div>

            <div class="sync-modal-content">
                {#if syncStatus.inProgress}
                    <div class="sync-status">
                        <div class="sync-spinner"></div>
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>

                    <div class="progress-container">
                        <div
                            class="progress-bar"
                            style="width: {syncStatus.progress}%"
                        ></div>
                    </div>

                    <p class="sync-count">
                        {syncStatus.completedUpdates} / {syncStatus.totalToUpdate}
                        product types processed
                    </p>
                {:else if syncStatus.message.includes("error") || syncStatus.message.includes("Error")}
                    <div class="sync-error">
                        <AlertCircle size={32} color="#ff5555" />
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {:else}
                    <div class="sync-success">
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:1113:5
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
{#if syncStatusModalOpen}
    <div
        class="sync-modal-overlay"
        on:click={() => !syncStatus.inProgress && (syncStatusModalOpen = false)}
    >
        <div class="sync-modal" on:click|stopPropagation>
            <div class="sync-modal-header">
                <h3>DHT Synchronization Status</h3>
                {#if !syncStatus.inProgress}
                    <button
                        class="close-button"
                        on:click={() => (syncStatusModalOpen = false)}
                    >
                        <X size={20} />
                    </button>
                {/if}
            </div>

            <div class="sync-modal-content">
                {#if syncStatus.inProgress}
                    <div class="sync-status">
                        <div class="sync-spinner"></div>
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>

                    <div class="progress-container">
                        <div
                            class="progress-bar"
                            style="width: {syncStatus.progress}%"
                        ></div>
                    </div>

                    <p class="sync-count">
                        {syncStatus.completedUpdates} / {syncStatus.totalToUpdate}
                        product types processed
                    </p>
                {:else if syncStatus.message.includes("error") || syncStatus.message.includes("Error")}
                    <div class="sync-error">
                        <AlertCircle size={32} color="#ff5555" />
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {:else}
                    <div class="sync-success">
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>
{/if}


/home/bur1/Holochain/summon/ui/src/CategoryReportsAdmin.svelte:1113:5
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
{#if syncStatusModalOpen}
    <div
        class="sync-modal-overlay"
        on:click={() => !syncStatus.inProgress && (syncStatusModalOpen = false)}
    >
        <div class="sync-modal" on:click|stopPropagation>
            <div class="sync-modal-header">
                <h3>DHT Synchronization Status</h3>
                {#if !syncStatus.inProgress}
                    <button
                        class="close-button"
                        on:click={() => (syncStatusModalOpen = false)}
                    >
                        <X size={20} />
                    </button>
                {/if}
            </div>

            <div class="sync-modal-content">
                {#if syncStatus.inProgress}
                    <div class="sync-status">
                        <div class="sync-spinner"></div>
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>

                    <div class="progress-container">
                        <div
                            class="progress-bar"
                            style="width: {syncStatus.progress}%"
                        ></div>
                    </div>

                    <p class="sync-count">
                        {syncStatus.completedUpdates} / {syncStatus.totalToUpdate}
                        product types processed
                    </p>
                {:else if syncStatus.message.includes("error") || syncStatus.message.includes("Error")}
                    <div class="sync-error">
                        <AlertCircle size={32} color="#ff5555" />
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {:else}
                    <div class="sync-success">
                        <p class="sync-message">{syncStatus.message}</p>
                    </div>
                {/if}
            </div>
        </div>
    </div>
{/if}


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:179:5
Warn: Unused CSS selector ":global(update-profile form) sl-button[variant="primary"]::part(base)" (svelte)

    :global(update-profile form) sl-button[variant="primary"]::part(base) {
        background: linear-gradient(


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:193:5
Warn: Unused CSS selector ":global(update-profile form)
        sl-button[variant="primary"]::part(base):hover" (svelte)

    :global(update-profile form)
        sl-button[variant="primary"]::part(base):hover {
        background: linear-gradient(


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:207:5
Warn: Unused CSS selector ":global(update-profile form) sl-button[variant="default"]::part(base)" (svelte)

    :global(update-profile form) sl-button[variant="default"]::part(base) {
        background: var(--background, #f2fffe) !important;


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:219:5
Warn: Unused CSS selector ":global(update-profile form)
        sl-button[variant="default"]::part(base):hover" (svelte)

    :global(update-profile form)
        sl-button[variant="default"]::part(base):hover {
        background: var(--surface, #ffffff) !important;


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:231:5
Warn: Unused CSS selector ":global(update-profile) sl-input::part(base)" (svelte)
    /* Input field styling */
    :global(update-profile) sl-input::part(base),
    :global(update-profile) sl-textarea::part(base) {


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:232:5
Warn: Unused CSS selector ":global(update-profile) sl-textarea::part(base)" (svelte)
    :global(update-profile) sl-input::part(base),
    :global(update-profile) sl-textarea::part(base) {
        border-radius: var(--btn-border-radius, 50px) !important;


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:238:5
Warn: Unused CSS selector ":global(update-profile) sl-input::part(base):hover" (svelte)

    :global(update-profile) sl-input::part(base):hover,
    :global(update-profile) sl-textarea::part(base):hover {


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:239:5
Warn: Unused CSS selector ":global(update-profile) sl-textarea::part(base):hover" (svelte)
    :global(update-profile) sl-input::part(base):hover,
    :global(update-profile) sl-textarea::part(base):hover {
        border-color: var(--primary, #00cfbb) !important;


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:243:5
Warn: Unused CSS selector ":global(update-profile) sl-input::part(base):focus-within" (svelte)

    :global(update-profile) sl-input::part(base):focus-within,
    :global(update-profile) sl-textarea::part(base):focus-within {


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:244:5
Warn: Unused CSS selector ":global(update-profile) sl-textarea::part(base):focus-within" (svelte)
    :global(update-profile) sl-input::part(base):focus-within,
    :global(update-profile) sl-textarea::part(base):focus-within {
        border-color: var(--primary, #00cfbb) !important;


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:8:13
Error: Variable 'dialog' implicitly has an 'any' type. (ts)
    export const close = () => {
        if (dialog) dialog.hide();
    };


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:11:13
Error: Variable 'dialog' implicitly has an 'any' type. (ts)
    export const open = () => {
        if (dialog) dialog.show();
    };


/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:15:9
Error: Variable 'dialog' implicitly has type 'any' in some locations where its type cannot be determined. (ts)
    // Dialog reference
    let dialog;



/home/bur1/Holochain/summon/ui/src/ProfileEditor.svelte:21:35
Error: Parameter 'event' implicitly has an 'any' type. (ts)
    // Handle profile updated event
    function handleProfileUpdated(event) {
        console.log("Profile updated:", event);


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:32:5
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
    <!-- Overlay -->
    <div
        class="overlay {isClosing ? 'fade-out' : 'fade-in'}"
        on:click={closeMenu}
    />



/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:32:5
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
    <!-- Overlay -->
    <div
        class="overlay {isClosing ? 'fade-out' : 'fade-in'}"
        on:click={closeMenu}
    />



/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:52:21
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
                <div class="profile-section">
                    <div
                        class="avatar-container"
                        on:click={() => {
                            showProfileEditor = true;
                            if (!profileEditorComponent) return;
                            profileEditorComponent.open();
                        }}
                        title="Edit Your Profile"
                    >
                        <agent-avatar
                            size="72"
                            agent-pub-key={myAgentPubKeyB64}
                            disable-tooltip={true}
                            disable-copy={true}
                        ></agent-avatar>
                    </div>
                    <div class="profile-text">Click to edit profile</div>


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:52:21
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
                <div class="profile-section">
                    <div
                        class="avatar-container"
                        on:click={() => {
                            showProfileEditor = true;
                            if (!profileEditorComponent) return;
                            profileEditorComponent.open();
                        }}
                        title="Edit Your Profile"
                    >
                        <agent-avatar
                            size="72"
                            agent-pub-key={myAgentPubKeyB64}
                            disable-tooltip={true}
                            disable-copy={true}
                        ></agent-avatar>
                    </div>
                    <div class="profile-text">Click to edit profile</div>


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:8:16
Warn: Component has unused export property 'store'. If it is for external reference only, please consider using `export const store` (svelte)

    export let store: any;
    export let myAgentPubKeyB64: string | undefined;


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:14:9
Error: Variable 'profileEditorComponent' implicitly has type 'any' in some locations where its type cannot be determined. (ts)
    let showProfileEditor = false;
    let profileEditorComponent;
    let isClosing = false;


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:25:35
Error: Parameter 'event' implicitly has an 'any' type. (ts)

    function handleProfileUpdated(event) {
        console.log("Profile updated event:", event);


/home/bur1/Holochain/summon/ui/src/SidebarMenu.svelte:56:34
Error: Variable 'profileEditorComponent' implicitly has an 'any' type. (ts)
                            showProfileEditor = true;
                            if (!profileEditorComponent) return;
                            profileEditorComponent.open();


/home/bur1/Holochain/summon/ui/src/HeaderContainer.svelte:35:14
Warn: Component has unused export property 'standAlone'. If it is for external reference only, please consider using `export const standAlone` (svelte)
  // These now come from the UiStateStore
  export let standAlone = false;
  export let cartTotal = 0; // This prop is passed from Controller, but we'll use the cart service value


/home/bur1/Holochain/summon/ui/src/HeaderContainer.svelte:103:16
Error: 'store' is possibly 'null'. (ts)

  $: uiProps = store.uiProps;



/home/bur1/Holochain/summon/ui/src/HeaderContainer.svelte:133:23
Error: 'store' is possibly 'null'. (ts)
        {store}
        productCache={store.productStore}
        on:select={({ detail }) =>


/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:112:5
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
  <div class="sidebar-header" bind:this={headerElement}>
    <div class="store-logo-container btn btn-toggle active" on:click={goToHome}>
      <div class="store-name">Ralphs Store</div>
    </div>
  </div>


/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:112:5
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
  <div class="sidebar-header" bind:this={headerElement}>
    <div class="store-logo-container btn btn-toggle active" on:click={goToHome}>
      <div class="store-name">Ralphs Store</div>
    </div>
  </div>


/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:119:7
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
    {#each mainCategories as category}
      <div
        class="category-item btn btn-toggle {selectedCategory === category.name
          ? 'active'
          : ''}"
        on:click={() => selectCategory(category.name)}
      >
        {category.name}
      </div>



/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:119:7
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
    {#each mainCategories as category}
      <div
        class="category-item btn btn-toggle {selectedCategory === category.name
          ? 'active'
          : ''}"
        on:click={() => selectCategory(category.name)}
      >
        {category.name}
      </div>



/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:130:11
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
        {#each category.subcategories as subcategory (subcategory.name)}
          <div
            class="subcategory-item btn btn-toggle {selectedSubcategory ===
            subcategory.name
              ? 'active'
              : ''}"
            on:click|stopPropagation={() => selectSubcategory(subcategory.name)}
          >
            {subcategory.name}
          </div>
        {/each}


/home/bur1/Holochain/summon/ui/src/CategorySidebar.svelte:130:11
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
        {#each category.subcategories as subcategory (subcategory.name)}
          <div
            class="subcategory-item btn btn-toggle {selectedSubcategory ===
            subcategory.name
              ? 'active'
              : ''}"
            on:click|stopPropagation={() => selectSubcategory(subcategory.name)}
          >
            {subcategory.name}
          </div>
        {/each}


/home/bur1/Holochain/summon/ui/src/cart/AddressSelector.svelte:135:25
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
                    {#each [...addresses.entries()] as [hash, address]}
                        <div
                            class="address-card {selectedAddressHash === hash
                                ? 'selected'
                                : ''}"
                            on:click={() => selectAddress(hash)}
                        >
                            <div class="address-icon">
                                <MapPin size={18} />
                            </div>
                            <div class="address-card-content">
                                <div class="address-label">
                                    {address.label || "Address"}
                                    {#if address.is_default}
                                        <span class="default-badge"
                                            >Default</span
                                        >
                                    {/if}
                                </div>
                                <div class="address-line">
                                    {address.street}
                                    {#if address.unit}
                                        <span class="unit">{address.unit}</span>
                                    {/if}
                                </div>
                                <div class="address-line">
                                    {address.city}, {address.state}
                                    {address.zip}
                                </div>
                            </div>
                            <div class="address-card-selector">
                                <div
                                    class="radio-circle {selectedAddressHash ===
                                    hash
                                        ? 'checked'
                                        : ''}"
                                ></div>
                            </div>
                        </div>
                    {/each}


/home/bur1/Holochain/summon/ui/src/cart/AddressSelector.svelte:135:25
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
                    {#each [...addresses.entries()] as [hash, address]}
                        <div
                            class="address-card {selectedAddressHash === hash
                                ? 'selected'
                                : ''}"
                            on:click={() => selectAddress(hash)}
                        >
                            <div class="address-icon">
                                <MapPin size={18} />
                            </div>
                            <div class="address-card-content">
                                <div class="address-label">
                                    {address.label || "Address"}
                                    {#if address.is_default}
                                        <span class="default-badge"
                                            >Default</span
                                        >
                                    {/if}
                                </div>
                                <div class="address-line">
                                    {address.street}
                                    {#if address.unit}
                                        <span class="unit">{address.unit}</span>
                                    {/if}
                                </div>
                                <div class="address-line">
                                    {address.city}, {address.state}
                                    {address.zip}
                                </div>
                            </div>
                            <div class="address-card-selector">
                                <div
                                    class="radio-circle {selectedAddressHash ===
                                    hash
                                        ? 'checked'
                                        : ''}"
                                ></div>
                            </div>
                        </div>
                    {/each}


/home/bur1/Holochain/summon/ui/src/cart/DeliveryTimeSelector.svelte:121:17
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
            {#each visibleDays as day}
                <div
                    class="date-card {selectedDate &&
                    day.date.getTime() === selectedDate.getTime()
                        ? 'selected'
                        : ''}"
                    on:click={() => selectDate(day.date)}
                >
                    <div class="date-card-day">{day.dayOfWeek}</div>
                    <div class="date-card-date">{day.dateFormatted}</div>
                </div>
            {/each}


/home/bur1/Holochain/summon/ui/src/cart/DeliveryTimeSelector.svelte:121:17
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
            {#each visibleDays as day}
                <div
                    class="date-card {selectedDate &&
                    day.date.getTime() === selectedDate.getTime()
                        ? 'selected'
                        : ''}"
                    on:click={() => selectDate(day.date)}
                >
                    <div class="date-card-day">{day.dayOfWeek}</div>
                    <div class="date-card-date">{day.dateFormatted}</div>
                </div>
            {/each}


/home/bur1/Holochain/summon/ui/src/cart/DeliveryTimeSelector.svelte:149:21
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
                {#each currentDateTimeSlots as timeSlot}
                    <div
                        class="time-slot {selectedTimeSlot &&
                        (typeof selectedTimeSlot === 'string'
                            ? selectedTimeSlot === timeSlot.slot
                            : selectedTimeSlot.id === timeSlot.id)
                            ? 'selected'
                            : ''}"
                        on:click={() => selectTimeSlot(timeSlot)}
                    >
                        <div class="time-slot-time">{timeSlot.display}</div>
                    </div>
                {/each}


/home/bur1/Holochain/summon/ui/src/cart/DeliveryTimeSelector.svelte:149:21
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
                {#each currentDateTimeSlots as timeSlot}
                    <div
                        class="time-slot {selectedTimeSlot &&
                        (typeof selectedTimeSlot === 'string'
                            ? selectedTimeSlot === timeSlot.slot
                            : selectedTimeSlot.id === timeSlot.id)
                            ? 'selected'
                            : ''}"
                        on:click={() => selectTimeSlot(timeSlot)}
                    >
                        <div class="time-slot-time">{timeSlot.display}</div>
                    </div>
                {/each}


/home/bur1/Holochain/summon/ui/src/cart/CheckoutSummary.svelte:13:16
Warn: Component has unused export property 'cartTotal'. If it is for external reference only, please consider using `export const cartTotal` (svelte)
    export let cartItems: any[] = [];
    export let cartTotal = 0;
    export let address: Address;


/home/bur1/Holochain/summon/ui/src/cart/CheckoutFlow.svelte:32:16
Warn: Component has unused export property 'productDetails'. If it is for external reference only, please consider using `export const productDetails` (svelte)
    export let cartItems: any[] = [];
    export let productDetails: Record<string, any> = {};
    export let cartTotal = 0;


/home/bur1/Holochain/summon/ui/src/cart/SlideOutCart.svelte:190:3
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)
>
  <div
    class="cart-container {isClosing ? 'slide-out-right' : 'slide-in-right'}"
    class:open={isOpen}
    on:click|stopPropagation
  >
    {#if isShowingCheckoutFlow && $cartServiceStore}
      <CheckoutFlow
        {client}
        cartService={$cartServiceStore}
        {cartItems}
        {productDetails}
        {cartTotal}
        onClose={closeCheckoutFlow}
        on:checkout-success={handleCheckoutSuccess}
      />
    {:else}
      <CartHeader onClose={closeCart} />

      <div class="cart-content">
        <div class="cart-main">
          <div class="cart-main-header">
            <div class="cart-title">
              Cart ({cartItems.length} item{cartItems.length !== 1 ? "s" : ""})
            </div>
            <button
              class="delete-cart-btn btn btn-icon btn-icon-primary btn-icon-sm"
              on:click={clearCart}
            >
              <X size={20} />
            </button>
          </div>

          <!-- UPDATED: Price display using PriceService -->
          <div class="cart-totals-section">
            <div class="cart-total-regular">
              Total: {PriceService.formatTotal(cartTotal)}
            </div>
            <div class="cart-total-promo">
              With loyalty card: {PriceService.formatTotal(cartPromoTotal)}
            </div>
            {#if totalSavings > 0}
              <div class="savings-amount">
                You save: {PriceService.formatSavings(totalSavings)}
              </div>
            {/if}
          </div>

          <div class="cart-items">
            {#if isLoading}
              <div class="loading">Loading cart items...</div>
            {:else if cartItems.length === 0}
              <div class="empty-cart">Your cart is empty</div>
            {:else}
              {#each [...cartItems]
                .filter((item) => item && item.groupHash)
                .sort((a, b) => safeCompare(a.groupHash, b.groupHash) || a.productIndex - b.productIndex) as item (`${item.groupHash}_${item.productIndex}`)}
                {@const detailsKey = `${item.groupHash}_${item.productIndex}`}
                {#if productDetails[detailsKey]}
                  <ProductCartItem
                    product={productDetails[detailsKey]}
                    quantity={item.quantity}
                    groupHash={item.groupHash}
                    productIndex={item.productIndex}
                    note={item.note}
                    isUpdating={false}
                  />
                {/if}
              {/each}
            {/if}

            {#if checkoutError}
              <div class="error-message">
                {checkoutError}
              </div>
            {/if}
          </div>

          <div class="checkout-button-container">
            <button
              class="checkout-button btn btn-primary btn-lg"
              disabled={cartItems.length === 0}
              on:click={startCheckout}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      </div>
    {/if}
  </div>
</div>


/home/bur1/Holochain/summon/ui/src/cart/SlideOutCart.svelte:190:3
Warn: A11y: <div> with click handler must have an ARIA role (svelte)
>
  <div
    class="cart-container {isClosing ? 'slide-out-right' : 'slide-in-right'}"
    class:open={isOpen}
    on:click|stopPropagation
  >
    {#if isShowingCheckoutFlow && $cartServiceStore}
      <CheckoutFlow
        {client}
        cartService={$cartServiceStore}
        {cartItems}
        {productDetails}
        {cartTotal}
        onClose={closeCheckoutFlow}
        on:checkout-success={handleCheckoutSuccess}
      />
    {:else}
      <CartHeader onClose={closeCart} />

      <div class="cart-content">
        <div class="cart-main">
          <div class="cart-main-header">
            <div class="cart-title">
              Cart ({cartItems.length} item{cartItems.length !== 1 ? "s" : ""})
            </div>
            <button
              class="delete-cart-btn btn btn-icon btn-icon-primary btn-icon-sm"
              on:click={clearCart}
            >
              <X size={20} />
            </button>
          </div>

          <!-- UPDATED: Price display using PriceService -->
          <div class="cart-totals-section">
            <div class="cart-total-regular">
              Total: {PriceService.formatTotal(cartTotal)}
            </div>
            <div class="cart-total-promo">
              With loyalty card: {PriceService.formatTotal(cartPromoTotal)}
            </div>
            {#if totalSavings > 0}
              <div class="savings-amount">
                You save: {PriceService.formatSavings(totalSavings)}
              </div>
            {/if}
          </div>

          <div class="cart-items">
            {#if isLoading}
              <div class="loading">Loading cart items...</div>
            {:else if cartItems.length === 0}
              <div class="empty-cart">Your cart is empty</div>
            {:else}
              {#each [...cartItems]
                .filter((item) => item && item.groupHash)
                .sort((a, b) => safeCompare(a.groupHash, b.groupHash) || a.productIndex - b.productIndex) as item (`${item.groupHash}_${item.productIndex}`)}
                {@const detailsKey = `${item.groupHash}_${item.productIndex}`}
                {#if productDetails[detailsKey]}
                  <ProductCartItem
                    product={productDetails[detailsKey]}
                    quantity={item.quantity}
                    groupHash={item.groupHash}
                    productIndex={item.productIndex}
                    note={item.note}
                    isUpdating={false}
                  />
                {/if}
              {/each}
            {/if}

            {#if checkoutError}
              <div class="error-message">
                {checkoutError}
              </div>
            {/if}
          </div>

          <div class="checkout-button-container">
            <button
              class="checkout-button btn btn-primary btn-lg"
              disabled={cartItems.length === 0}
              on:click={startCheckout}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      </div>
    {/if}
  </div>
</div>


/home/bur1/Holochain/summon/ui/src/cart/SlideOutCart.svelte:185:1
Warn: A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as <button type="button"> or <a> might be more appropriate. See https://svelte.dev/docs/accessibility-warnings#a11y-click-events-have-key-events for more details. (svelte)

<div
  class="overlay {isOpen ? (isClosing ? 'fade-out' : 'fade-in') : ''}"
  class:visible={isOpen}
  on:click={closeCart}
>
  <div
    class="cart-container {isClosing ? 'slide-out-right' : 'slide-in-right'}"
    class:open={isOpen}
    on:click|stopPropagation
  >
    {#if isShowingCheckoutFlow && $cartServiceStore}
      <CheckoutFlow
        {client}
        cartService={$cartServiceStore}
        {cartItems}
        {productDetails}
        {cartTotal}
        onClose={closeCheckoutFlow}
        on:checkout-success={handleCheckoutSuccess}
      />
    {:else}
      <CartHeader onClose={closeCart} />

      <div class="cart-content">
        <div class="cart-main">
          <div class="cart-main-header">
            <div class="cart-title">
              Cart ({cartItems.length} item{cartItems.length !== 1 ? "s" : ""})
            </div>
            <button
              class="delete-cart-btn btn btn-icon btn-icon-primary btn-icon-sm"
              on:click={clearCart}
            >
              <X size={20} />
            </button>
          </div>

          <!-- UPDATED: Price display using PriceService -->
          <div class="cart-totals-section">
            <div class="cart-total-regular">
              Total: {PriceService.formatTotal(cartTotal)}
            </div>
            <div class="cart-total-promo">
              With loyalty card: {PriceService.formatTotal(cartPromoTotal)}
            </div>
            {#if totalSavings > 0}
              <div class="savings-amount">
                You save: {PriceService.formatSavings(totalSavings)}
              </div>
            {/if}
          </div>

          <div class="cart-items">
            {#if isLoading}
              <div class="loading">Loading cart items...</div>
            {:else if cartItems.length === 0}
              <div class="empty-cart">Your cart is empty</div>
            {:else}
              {#each [...cartItems]
                .filter((item) => item && item.groupHash)
                .sort((a, b) => safeCompare(a.groupHash, b.groupHash) || a.productIndex - b.productIndex) as item (`${item.groupHash}_${item.productIndex}`)}
                {@const detailsKey = `${item.groupHash}_${item.productIndex}`}
                {#if productDetails[detailsKey]}
                  <ProductCartItem
                    product={productDetails[detailsKey]}
                    quantity={item.quantity}
                    groupHash={item.groupHash}
                    productIndex={item.productIndex}
                    note={item.note}
                    isUpdating={false}
                  />
                {/if}
              {/each}
            {/if}

            {#if checkoutError}
              <div class="error-message">
                {checkoutError}
              </div>
            {/if}
          </div>

          <div class="checkout-button-container">
            <button
              class="checkout-button btn btn-primary btn-lg"
              disabled={cartItems.length === 0}
              on:click={startCheckout}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      </div>
    {/if}
  </div>
</div>



/home/bur1/Holochain/summon/ui/src/cart/SlideOutCart.svelte:185:1
Warn: A11y: <div> with click handler must have an ARIA role (svelte)

<div
  class="overlay {isOpen ? (isClosing ? 'fade-out' : 'fade-in') : ''}"
  class:visible={isOpen}
  on:click={closeCart}
>
  <div
    class="cart-container {isClosing ? 'slide-out-right' : 'slide-in-right'}"
    class:open={isOpen}
    on:click|stopPropagation
  >
    {#if isShowingCheckoutFlow && $cartServiceStore}
      <CheckoutFlow
        {client}
        cartService={$cartServiceStore}
        {cartItems}
        {productDetails}
        {cartTotal}
        onClose={closeCheckoutFlow}
        on:checkout-success={handleCheckoutSuccess}
      />
    {:else}
      <CartHeader onClose={closeCart} />

      <div class="cart-content">
        <div class="cart-main">
          <div class="cart-main-header">
            <div class="cart-title">
              Cart ({cartItems.length} item{cartItems.length !== 1 ? "s" : ""})
            </div>
            <button
              class="delete-cart-btn btn btn-icon btn-icon-primary btn-icon-sm"
              on:click={clearCart}
            >
              <X size={20} />
            </button>
          </div>

          <!-- UPDATED: Price display using PriceService -->
          <div class="cart-totals-section">
            <div class="cart-total-regular">
              Total: {PriceService.formatTotal(cartTotal)}
            </div>
            <div class="cart-total-promo">
              With loyalty card: {PriceService.formatTotal(cartPromoTotal)}
            </div>
            {#if totalSavings > 0}
              <div class="savings-amount">
                You save: {PriceService.formatSavings(totalSavings)}
              </div>
            {/if}
          </div>

          <div class="cart-items">
            {#if isLoading}
              <div class="loading">Loading cart items...</div>
            {:else if cartItems.length === 0}
              <div class="empty-cart">Your cart is empty</div>
            {:else}
              {#each [...cartItems]
                .filter((item) => item && item.groupHash)
                .sort((a, b) => safeCompare(a.groupHash, b.groupHash) || a.productIndex - b.productIndex) as item (`${item.groupHash}_${item.productIndex}`)}
                {@const detailsKey = `${item.groupHash}_${item.productIndex}`}
                {#if productDetails[detailsKey]}
                  <ProductCartItem
                    product={productDetails[detailsKey]}
                    quantity={item.quantity}
                    groupHash={item.groupHash}
                    productIndex={item.productIndex}
                    note={item.note}
                    isUpdating={false}
                  />
                {/if}
              {/each}
            {/if}

            {#if checkoutError}
              <div class="error-message">
                {checkoutError}
              </div>
            {/if}
          </div>

          <div class="checkout-button-container">
            <button
              class="checkout-button btn btn-primary btn-lg"
              disabled={cartItems.length === 0}
              on:click={startCheckout}
            >
              Proceed to Checkout
            </button>
          </div>
        </div>
      </div>
    {/if}
  </div>
</div>



====================================
svelte-check found 16 errors and 55 warnings in 15 files
npm error Lifecycle script `check` failed with error:
npm error code 1
npm error path /home/bur1/Holochain/summon/ui
npm error workspace customer-ui@0.11.0
npm error location /home/bur1/Holochain/summon/ui
npm error command failed
npm error command sh -c svelte-check --tsconfig ./tsconfig.json
